env:
  CIRRUS_VAULT_URL: https://vault.sonar.build:8200
  CIRRUS_VAULT_AUTH_PATH: jwt-cirrusci
  CIRRUS_VAULT_ROLE: cirrusci-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}

  ARTIFACTORY_URL: VAULT[development/kv/data/repox data.url]
  ARTIFACTORY_PRIVATE_USERNAME: vault-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader
  ARTIFACTORY_PRIVATE_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  ARTIFACTORY_DEPLOY_USERNAME: vault-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer
  ARTIFACTORY_DEPLOY_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer access_token]
  #Possible values for ARTIFACTORY_DEPLOY_REPO: sonarsource-private-qa, sonarsource-public-qa
  ARTIFACTORY_DEPLOY_REPO: sonarsource-public-qa
  ARTIFACTORY_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  PATH: ${CIRRUS_WORKING_DIR}/.cirrus:${PATH}
  # Use bash (instead of sh on linux or cmd.exe on windows)
  CIRRUS_SHELL: bash

build_secrets: &BUILD_SECRETS
  SIGN_KEY: VAULT[development/kv/data/sign data.key]
  PGP_PASSPHRASE: VAULT[development/kv/data/sign data.passphrase]
  # analysis on next
  SONAR_TOKEN: VAULT[development/kv/data/next data.token]
  SONAR_HOST_URL: https://next.sonarqube.com/sonarqube

pr_analysis_secrets: &PR_ANALYSIS_SECRETS
  GITHUB_TOKEN: VAULT[development/github/token/licenses-ro token]

mend_scan_secrets: &MEND_SCAN_SECRETS
  WS_APIKEY: VAULT[development/kv/data/mend data.apikey]

promote_secrets: &PROMOTE_SECRETS
  ARTIFACTORY_PROMOTE_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-promoter access_token]
  GITHUB_TOKEN: VAULT[development/github/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-promotion token]

# ----------------------------------------------
# ------------------CACHING---------------------
# ----------------------------------------------

setup_orchestrator_cache: &SETUP_ORCHESTRATOR_CACHE
  set_orchestrator_home_script: |
    export TODAY=$(date '+%Y-%m-%d')
    echo "TODAY=${TODAY}" >> $CIRRUS_ENV
    echo "ORCHESTRATOR_HOME=${CIRRUS_WORKING_DIR}/orchestrator/${TODAY}" >> $CIRRUS_ENV
  mkdir_orchestrator_home_script: |
    echo "Create dir ${ORCHESTRATOR_HOME} if needed"
    mkdir -p ${ORCHESTRATOR_HOME}
  orchestrator_cache:
    folder: ${ORCHESTRATOR_HOME}
    fingerprint_script: echo ${TODAY}
    reupload_on_changes: "true"

# ----------------------------------------------
# -------------CONTAINER DEFINITIONS------------
# ----------------------------------------------

default_container_definition: &DEFAULT_CONTAINER_DEFINITION
  cluster_name: ${CIRRUS_CLUSTER_NAME}
  region: eu-central-1
  namespace: default

container_definition: &CONTAINER_DEFINITION
  eks_container:
    image: ${CIRRUS_AWS_ACCOUNT}.dkr.ecr.eu-central-1.amazonaws.com/base:j17-latest
    <<: *DEFAULT_CONTAINER_DEFINITION
    cpu: 2
    memory: 2G

qa_container_definition: &QA_CONTAINER_DEFINITION
  eks_container:
    image: ${CIRRUS_AWS_ACCOUNT}.dkr.ecr.eu-central-1.amazonaws.com/base:j17-latest
    <<: *DEFAULT_CONTAINER_DEFINITION
    cpu: 4
    memory: 8G

win_vm_definition: &WINDOWS_VM_DEFINITION
  ec2_instance:
    experimental: true # see https://github.com/cirruslabs/cirrus-ci-docs/issues/1051
    image: base-windows-jdk17-v*
    platform: windows
    region: eu-central-1
    type: t3.xlarge
    subnet_id: ${CIRRUS_AWS_SUBNET}
    use_ssd: true

# ----------------------------------------------
# ------------------FILTERS---------------------
# ----------------------------------------------

depends_on_build: &DEPENDS_ON_BUILD
  depends_on:
    - build

only_sonarsource_qa: &ONLY_SONARSOURCE_QA
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && $CIRRUS_TAG == "" && 
    ($CIRRUS_PR != "" || $CIRRUS_BRANCH == "master" || $CIRRUS_BRANCH =~ "branch-.*" || $CIRRUS_BRANCH =~ "dogfood-on-.*" || $CIRRUS_BRANCH =~ "release.*")

only_main_branches_filter: &ONLY_MAIN_BRANCHES
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && $CIRRUS_TAG == "" &&
    ($CIRRUS_BRANCH == $CIRRUS_DEFAULT_BRANCH || $CIRRUS_BRANCH =~ "branch-.*")


# ----------------------------------------------
# -------------------TASKS----------------------
# ----------------------------------------------

build_task:
  <<: *CONTAINER_DEFINITION
  eks_container:
    memory: 3G
  env:
    <<: *BUILD_SECRETS
    #allow deployment of pull request artifacts to repox
    DEPLOY_PULL_REQUEST: true
    CIRRUS_CLONE_DEPTH: 50
  build_script:
    - git submodule update --init
    - source cirrus-env BUILD
    # TODO Remove ITs exclusion after SONARIAC-1521, since the ITs won't be in the test task anymore
    - regular_gradle_build_deploy_analyze -x :its:plugin:tests:test -x :its:ruling:test

build_win_task:
  <<: *WINDOWS_VM_DEFINITION
  <<: *ONLY_SONARSOURCE_QA
  <<: *DEPENDS_ON_BUILD
  build_script:
    - git config --global core.autocrlf input
    - source cirrus-env CI
    # TODO Remove ITs exclusion after SONARIAC-1521, since the ITs won't be in the test task anymore
    - ./gradlew clean build -x :its:plugin:tests:test -x :its:ruling:test

plugin_qa_task:
  <<: *ONLY_SONARSOURCE_QA
  <<: *DEPENDS_ON_BUILD
  <<: *QA_CONTAINER_DEFINITION
  <<: *SETUP_ORCHESTRATOR_CACHE
  env:
    CIRRUS_CLONE_DEPTH: 1
    matrix:
      - SQ_VERSION: LATEST_RELEASE
      - SQ_VERSION: DEV
  submodules_script:
    - git submodule update --init
  qa_script:
    - source cirrus-env QA
    - source set_gradle_build_version $BUILD_NUMBER
    - cd its/plugin
    - ../../gradlew test

ruling_task:
  <<: *ONLY_SONARSOURCE_QA
  <<: *DEPENDS_ON_BUILD
  <<: *QA_CONTAINER_DEFINITION
  <<: *SETUP_ORCHESTRATOR_CACHE
  env:
    CIRRUS_CLONE_DEPTH: 1
    matrix:
      - PHP_PROJECT: "Flysystem"
      - PHP_PROJECT: "Monica"
      - PHP_PROJECT: "PhpCodeSniffer"
      - PHP_PROJECT: "PhpMailer"
      - PHP_PROJECT: "Psysh"
      - PHP_PROJECT: "PhpWord"
      - PHP_PROJECT: "RubixML"
      - PHP_PROJECT: "PhpSpreadsheet"
  submodules_script:
    - git submodule update --init
  ruling_script:
    - source cirrus-env QA
    - source set_gradle_build_version $BUILD_NUMBER
    - cd its/ruling
    - ../../gradlew -Dtest=PhpGeneralRulingTest#test${PHP_PROJECT} -Drevision=${PROJECT_VERSION} -Dsonar.runtimeVersion=LATEST_RELEASE -Dmaven.test.redirectTestOutputToFile=false test

pr_analysis_task:
  <<: *ONLY_SONARSOURCE_QA
  <<: *DEPENDS_ON_BUILD
  <<: *QA_CONTAINER_DEFINITION
  env:
    <<: *PR_ANALYSIS_SECRETS
    CIRRUS_CLONE_DEPTH: 1
  submodules_script:
    - git submodule update --init
  ruling_script:
    - source cirrus-env QA
    - source set_gradle_build_version $BUILD_NUMBER
    - cd its/ruling
    - ../../gradlew -Dtest=PhpPrAnalysisTest test

ws_scan_task:
  <<: *ONLY_MAIN_BRANCHES
  <<: *DEPENDS_ON_BUILD
  <<: *CONTAINER_DEFINITION
  env:
    <<: *MEND_SCAN_SECRETS
  whitesource_script:
    - source cirrus-env QA
    - source set_gradle_build_version $BUILD_NUMBER
    - ./gradlew clean build -x test
    - source ws_scan.sh
  allow_failures: "true"
  always:
    ws_artifacts:
      path: "whitesource/**/*"


promote_task:
  depends_on:
    - ruling
    - pr_analysis
    - plugin_qa
  <<: *ONLY_SONARSOURCE_QA
  <<: *CONTAINER_DEFINITION
  env:
    <<: *PROMOTE_SECRETS
  script: cirrus_promote_maven
